import React, { Component } from "react";
import Chat from "../Chat";
import GameView from "../GameView";
const signalR = require("@aspnet/signalr");

/* isSignalrConnected is a Global variable that holds true if their is a signalr connection between the client and the server. 
** Its initial value is false so that when the browser loads this page, a connection to the signalr hub is established only once*/
var isSignalrConnected = false;

class GameRoom extends Component {
  constructor(props){
    super(props);
    /* Declaring two GameRoom Component state variables. One to hold the state of the isSignalrConnected Global variable, 
    ** and the other to hold the actual connection that is established. */
    this.state = {
      isSignalrConnected: isSignalrConnected,
      connection: null
    }
  }

  // Native method of every Component Class that runs code after all parent class components are rendered.
  componentDidMount(){

    /* gameId will be a variable that holds the unique id of its games instance, which will be retreived from part of the url (which is generated by the signalr hub)
    ** We will be using this id to establish a signalr group that holds each connection from every player. */
    var gameId= "123";

    //userId will be the variable that holds the unique id of the player, we will be using this id to establish a signalr group that holds each connection from an individual player.
    var userId = "963";

    /*SessionIds is a variable that holds both gameId and userId, 
    ** will be passed to the signalr hub when a connection is established to add players to signalr hub's game session group and individual user group. */
    var SessionIds  = [gameId, userId];

    //connection variable holds the signalr connection configuration which includes the url of the port that the signalr hub is listening on.
    let connection = new signalR.HubConnectionBuilder()
    .withUrl("http://localhost:5000/chatHub")
    .build();

    /* this.setState is setting previous connection variable to the connection state variable that was initialize in the constructor method.
    ** this.setState has a callback function the begins the signalr connection process */
    this.setState({connection}, ()=>{
      //if isSignalrConnected state variable is false (that means there is no connect), then start signalr connection process.
      if(!this.state.isSignalrConnected){
      
        /* this.state.connection.start() establishes the signalr connection between the client and the hub.
        ** There are three callback functions, one that sends the Session id to the hub, and the other that tests the connection.
        ** There is a catch callback function that handles all errors that arises when attempting to establish the signalr connection*/
        this.state.connection.start()
        .then(() => connection.invoke("joinGameSession", SessionIds))
        .then(() => connection.invoke("sendMessage", "Hello"))
        .catch(err => console.log("Connection Failed..."));
        
        // since a signalr connection was established, we set the isSignalrConnected state and global variable to true.
        this.setState({
          isSignalrConnected: true
        })
        isSignalrConnected = true;
      }
      
      //method that receives test data from the signalr hub in the server.
      this.state.connection.on("incomingMessage", data => {
          console.log(data);
      });

      //method that receives player chat message data from the signalr hub in the server.
      this.state.connection.on("receiveMessage", data => {
        //uses ref to pass data to the Chat child component. Specifically, the receiveMessage method found in the Chat component class
        this.chat.receiveMessage(data);
      });

    });

  }

  // Native method of every Component Class that runs code when you navigate to a new page/component.
  componentWillUnmount() {
    isSignalrConnected = false;
    this.state.connection.stop();
  }

  /* render's html 
  ** in the Chat component I pass the isSignalrConnected and connection state variables*/
  render() {
    return (
      <div className="Content"> 
        <Chat ref={(hold)=> {this.chat = hold}} isConnected={{bool: this.state.isSignalrConnected, connectionHub: this.state.connection}}/>
        <GameView />
      </div>
    );
  }
}
export default GameRoom;